#+TITLE: TTRG - Resources
#+OPTIONS: author:nil date:nil email:nil

#+MACRO: contact-me @ me on Slack or GitHub, or ping me an e-mail

* Introduction

What follows is an overview of useful resources (links,
papers, software, etc.) for the Type Theory Reading Group.

* Links

** Repositories

The following pages are repositories for more links, i.e.,
they are pages that link to pages. Many of these are links to
personal webpages, from which papers, works, and projects are
accessible.

- [[https://www.jonmsterling.com/][Jon Sterling]]<<Jon Sterling>>

  Main research areas: type theory, programming languages,
  semantics.

  Jon has quite a lot of work on dependent type theory, modal
  type theory, and [[CCTT][cartesian cubical type theory]].

  - Doctoral student of [[Robert Harper][Robert Harper]]

- [[http://very.science/][Kenny Foner's homepage]]

  - Has worked on [[modal-logic][modal logic]] and comonads

- [[https://www.cs.cmu.edu/~rwh/][Robert Harper's Home Page]]<<Robert Harper>>

  - Has worked on type theory, homotopy type theory, [[CCTT][cartesian
    cubical computational type theory]], computational higher
    type theory, constructive logic, [[Standard ML][Standard ML]], and
    programming language foundations

** Miscellaneous

Not sure where else to put these, {{{contact-me}}} if you have
any suggestions.

- [[http://typetheorypodcast.com/][The Type Theory Podcast]]

  A podcast about type theory! Run by David Christiansen,
  Darin Morrison, and [[Jon Sterling][Jon Sterling]].

  Only six episodes (as of [2019-04-28 Sun]), so I'll list
  them here. These all sound very interesting!

  - [[http://typetheorypodcast.com/2014/08/episode-1-peter-dybjer-on-type-theory-and-testing/][Episode 1: Peter Dybjer on types and testing]]

  - [[http://typetheorypodcast.com/2014/09/episode-2-edwin-brady-on-idris/][Episode 2: Edwin Brady on Idris]]

  - [[http://typetheorypodcast.com/2015/01/episode-3-dan-licata-on-homotopy-type-theory/][Episode 3: Dan Licata on Homotopy Type Theory]]

  - [[http://typetheorypodcast.com/2015/04/episode-4-stephanie-weirich-on-zombie-and-dependent-haskell/][Episode 4: Stephanie Weirich on Zombie and Dependent
    Haskell]]

  - [[http://typetheorypodcast.com/2015/08/episode-5-bob-constable-on-ctt-and-nuprl/][Episode 5: Bob Constable on CTT and Nuprl]]

  - [[http://typetheorypodcast.com/2016/12/episode-6-aaron-stump-on-cedille/][Episode 6: Aaron Stump on Cedille]]

  If these episodes should disappear for some reason,
  {{{contact-me}}}, and I'll send you MP3 copies.

** Cartesian Cubical Type Theory<<CCTT>>

- [[https://github.com/RedPRL/redtt][GitHub - RedPRL/redtt: "Between the darkness and the dawn, a
  red cube rises!": a proof assistant for cartesian cubical
  type theory]]

  From the README:

  #+BEGIN_QUOTE
  redtt is a core language for [[CCTT][cartesian cubical type theory]]
  with extension types. We [[[Jon Sterling][Jon Sterling]] et al.] plan to build
  an extensible interactive proof assistant around it, using
  ideas from proof assistants like [[RedPRL][RedPRL]], Epigram, and Idris.
  #+END_QUOTE

- [[http://www.redprl.org/en/latest/][The RedPRL Proof Assistant â€” RedPRL documentation]]<<RedPRL>>

  From the webpage:

  #+BEGIN_QUOTE
  RedPRL is an experimental proof assistant based on [[CCTT][cubical
  computational type theory]], which extends the Nuprl semantics
  by higher-dimensional features inspired by homotopy type
  theory.
  #+END_QUOTE

** Effects

- [[https://www.janestreet.com/tech-talks/effective-programming/][Effective Programming: Adding an Effect System to OCaml]]

  A medium-length talk by Leo White (just over an hour) in
  which he introduces work adding support for algebraic
  effects to OCaml, along with support for distinguishing
  impure and pure functions.

** Modal Logic<<modal-logic>>

- [[https://plato.stanford.edu/entries/logic-modal/][Modal Logic (Stanford Encyclopedia of Philosophy)]]

  A nice overview of modal logic, with references to many
  useful sources. Recommended reading when learning about
  modal logic, or as reference material.

** Propositional Logic

- [[https://www.iep.utm.edu/prop-log/][Propositional Logic | Internet Encyclopedia of Philosophy]]

  Overview of propositional logic. Includes an overview of the
  history, syntax and semantics, proof by natural deduction,
  some metatheoretic results for the propositional calculus,
  and briefly touches on [[modal-logic][modal propositional logic]]. The page
  also includes suggestions for further reading.

** Singletons

- [[https://stackoverflow.com/questions/16017294/singleton-types-in-haskell][Singleton types in Haskell - Stack Overflow]]

  A question about the difference between singleton types and
  type classes, as well as a request for the importance of
  using singletons, and the extent to which they can support
  dependently-typed programming.

  I suggest reading [[https://stackoverflow.com/questions/16017294/singleton-types-in-haskell/16018937#16018937][Dominic's answer]], where he makes the
  following points:

  - in a type theory that allows types to depend on types,
    singleton types can be used to let types depend upon
    singleton values;
  - in contrast, type classes provide /ad hoc polymorphism/,
    i.e., supporting the dependency of /values upon types/

  Dominic goes on to give the following example of the use of
  singletons to define the dependently-typed successor
  function:

  #+BEGIN_SRC haskell
    data S n = Succ n
    data Z   = Zero

    class Nat n
    instance Nat Z
    instance Nat n => Nat (S n)

    succ :: Nat n => n -> S n
    succ n = Succ n
  #+END_SRC

  And follows with an example of the use of GADTs to
  parameterise non-singleton types with singleton types:

  #+BEGIN_SRC haskell
    data List n a where
      Nil  :: List Z a
      Cons :: Nat n => a -> List n a -> List (S n) a
  #+END_SRC

  Dominic concludes by describing how singleton types provide
  a kind of \Pi-type, where =Nat n => n -> S n= is analogous
  to $\prod\limits_{n : \mathrm{Nat}}(n \rightarrow S(n))$.

** Standard ML

- [[http://sml-family.org/][Standard ML Family GitHub Project]]

  Main webpage for the Standard ML family GitHub project.

  The page provides links to many formal definitions of ML, as
  well as a host of other Standard ML-related resources.
